// ==Changelog==
// 0.2.1
//   - Converted Greasemonkey Script: Gmail Unreads Summary into Google Chrome Extension.
//   - Updated Main URL.
// 0.2.2
//   - Updated Manifest; Fix for GoogleApp users.
// 0.2.3
//   - Updated display of Summary; Sort by "Number of Emails", descending.
//   - Fixed bug with email counts, caused by Hidden views generated by search links.
// 0.2.4
//   - Fixed bug with 'sname and 'email', caused by Threaded and Sent Emails.
// ==/Changelog==

/*****
 * Initialize
 *****/

create_view();

/*****
 * Main
 *****/

function create_view() {

  window.setTimeout(function() {

    console.log("Gmail Unreads Summary: Start");

    // Display Views
    switch(winActiveViewType()) {
      case 'tl' : break;
      default   : return false;
    }

    // Gmail API
    var head  = winMastheadElement();
    var body  = winActiveViewElement();

    // jQuerised JS Elements
    var jhead = $(head);
    var jbody = $(body);

    // Reset
    var gmus  = jhead.find('div#gmus');
    gmus.remove();

    // Create Views
    create_refresh(jhead, jbody);
    create_content(jhead, jbody);

    console.log("Gmail Unreads Summary: End");

  }, 1000);

};

function create_refresh(jhead, jbody) {

  if (!jbody.find('div#gmus_refresh').is('*')) {

    // Create Refresh Link
    var jlink = $('<div id="gmus_refresh" class="J-J5-Ji"><a class="AP" href="#">Refresh GMUS</a></div>');

    // Append to Body
    jbody.find('div.J-J5-Ji').find('div.AP').parent().after(jlink);

    // Action -  Refresh Binding
    var gmus_refresh = jbody.find('div#gmus_refresh');

    gmus_refresh.bind('click', function() {
      create_view();
    });

  }

};

function create_content(jhead, jbody) {

  // Summarise
  var summary = new Array();
  var cnt     = 0;

  var dhref   = jhead.find('a.e').attr('href');           // Main URL
  var items   = jbody.find('tr.zE');                      // Class for Unread Emails

  for (var i=0; i<items.length; i++) {

    var item  = items[i];

    // Search Links generate Hidden views. Ignore!
    if ($(item).parents(':hidden').length) { continue; }

    // Build Name, Email and Query
    var auths = $(item).find('span.zF');
    var sname = $(auths).filter( function (index) { if ($(auths).length > 1) { return $(this).html() != 'me'; } else { return  true; } } ).filter(':last').html();
    var email = $(auths).filter( function (index) { if ($(auths).length > 1) { return $(this).html() != 'me'; } else { return  true; } } ).filter(':last').attr('email');
    var query = dhref.substring(0, dhref.indexOf('#')) + '#search/in:inbox+label:unread+from:' + encodeURIComponent(email);

    if (summary[email] == null) {
      summary[email]     = new Array(sname, email, query, 1);
    } else {
      summary[email][3] += 1;
    }
    cnt++;

  }

  // Convert Summary Hash to Array
  var sgroups = new Array();
  for (var email in summary) {
    sgroups.push(summary[email]);
  }

  // Sorting Summary Array By Count Desc
  sgroups.sort(
    function(a,b) {
      a = a[3];
      b = b[3];
      return a == b ? 0 : (a > b ? -1 : 1)
    }
  );

  if (cnt > 0) {

    // Create Content
    var jelem = $('<div id="gmus" style="display: block; overflow: hidden; background: #E0ECFF; border: 4px solid #C3D9FF; margin: 10px; padding: 10px; ">&nbsp;</div>');
    jelem.append('<h5 class="header" style="display: block; float: left; padding: 0px; margin: 2px 0;">Inbox Summary of Unread Emails' + ' (Total Items: ' + cnt + ')' + '</h5>');
    jelem.append('<div id="gmus_toggler"  style="float: right; cursor: pointer; font-family: Courier; font-size: 12px; color: #0000CC;">[' + (LS_getValue('gmus_hide',false) ? '+' : '-') + ']</div>');

    var contents = '<div id="gmus_content" style="display:' + (LS_getValue('gmus_hide',false) ? 'none' : 'block') + ';"><ul style="list-style-type: none; padding: 0px; margin 0px;">'
    for (var i=0; i<sgroups.length; i++) {
      var sgroup = sgroups[i];
      contents  += '<li style="display: block; float: left; margin: 2px 10px 2px 5px; width: 185px; font-size: 12px; font-weight: bold;"><a target="_top" href="' + sgroup[2] + '" title="' + sgroup[1] + '">' + sgroup[0] + ' (' + sgroup[3] + ')' + '</a></li>';
    }
    contents    += '</ul></div>';
    jelem.append(contents);

    // Append to Head
    jhead.append(jelem);

    // Action - Minimize + Maximize Binding
    var gmus_toggler = jhead.find('div#gmus_toggler');
    var gmus_content = jhead.find('div#gmus_content');

    gmus_toggler.bind('click', function() {
      if (LS_getValue('gmus_hide',false)) {
        gmus_toggler.html('[-]');
        gmus_content.show();
        LS_setValue('gmus_hide', false);
      } else {
        gmus_toggler.html('[+]');
        gmus_content.hide();
        LS_setValue('gmus_hide', true);
      }
    });

  }

};


/*****
 * Gmail-Greasemonkey API (http://code.google.com/p/gmail-greasemonkey/wiki/GmailGreasemonkey10API) Implementation
 *****/

  // Re-implementation of getActiveViewType
  function winActiveViewType() {

    var body  = $('iframe#canvas_frame').contents().find('div.nH.q0CeU.z');

    if (body.is("*")) {
      return 'tl';
    } else {
      return 'na';
    }

  };

  // Re-implementation of getMastheadElement
  function winMastheadElement() {
    return $('iframe#canvas_frame').contents().find('div.aC');
  };

  // Re-implementation of getActiveViewElement
  function winActiveViewElement() {
    return $('iframe#canvas_frame').contents().find('div.nH.q0CeU.z');
  };


/*****
 * Greasemoneky Storage Implementation
 *****/

  // Re-implmentation of GM_getValue for localStorage
  function LS_getValue(key, default_value) {

    var value = localStorage[key];
    switch(value) {
      case null   :
        return default_value;
        break;
      case 'false':
        return false;
        break;
      default:
        return value;
    }

  };

  // Re-implmentation of GM_setValue for localStorage
  function LS_setValue(key, value) {
    localStorage[key] = value;
  };